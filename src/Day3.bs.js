// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

var input = Fs.readFileSync("./src/input/day3.txt", "utf8").split("\n");

var parsed_input = Belt_Array.reduce(input, "", (function (acc, item) {
          return acc + item;
        })).split("");

var length = parsed_input.length;

var height = input.length;

var width = Belt_Array.getExn(input, 0).length;

function move(a, b) {
  return {
          x: a.x + b.x | 0,
          y: a.y + b.y | 0
        };
}

var slopes = [
  {
    x: 1,
    y: 1
  },
  {
    x: 3,
    y: 1
  },
  {
    x: 5,
    y: 1
  },
  {
    x: 7,
    y: 1
  },
  {
    x: 1,
    y: 2
  }
];

function validate(ch) {
  return ch === "#";
}

function traverse(slope, _coord, _acc) {
  while(true) {
    var acc = _acc;
    var coord = _coord;
    var index = Caml_int32.mod_(coord.x, width) + Math.imul(coord.y, width) | 0;
    var _val = Belt_Array.get(parsed_input, index);
    if (_val === undefined) {
      return acc;
    }
    var new_acc = acc + _val;
    _acc = new_acc;
    _coord = move(slope, coord);
    continue ;
  };
}

function solution(item) {
  return Array.from(traverse(item, {
                    x: 0,
                    y: 0
                  }, ""), (function (x) {
                  return x;
                })).filter(validate).length;
}

var part1 = solution({
      x: 3,
      y: 1
    });

var part2 = Belt_Array.reduce(Belt_Array.map(Belt_Array.map(slopes, solution), (function (v) {
            return v;
          })), 1.0, (function (acc, item) {
        return acc * item;
      }));

console.log(part1);

console.log(part2);

exports.input = input;
exports.parsed_input = parsed_input;
exports.length = length;
exports.height = height;
exports.width = width;
exports.move = move;
exports.slopes = slopes;
exports.validate = validate;
exports.traverse = traverse;
exports.solution = solution;
exports.part1 = part1;
exports.part2 = part2;
/* input Not a pure module */
