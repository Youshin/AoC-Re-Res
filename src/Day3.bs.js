// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

var input = Fs.readFileSync("./src/input/day3.txt", "utf8").split("\n");

var parsed_input = Belt_Array.reduce(input, "", (function (acc, item) {
          return acc + item;
        })).split("");

var length = parsed_input.length;

var height = input.length;

var width = Belt_Array.getExn(input, 0).length;

var slopes = [
  [
    1,
    1
  ],
  [
    3,
    1
  ],
  [
    5,
    1
  ],
  [
    7,
    1
  ],
  [
    1,
    2
  ]
];

function validate(ch) {
  return ch === "#";
}

function traverse(slope, _param, _acc) {
  while(true) {
    var param = _param;
    var acc = _acc;
    var curr_y = param[1];
    var curr_x = param[0];
    var index = Caml_int32.mod_(curr_x, width) + Math.imul(curr_y, width) | 0;
    var _val = Belt_Array.get(parsed_input, index);
    if (_val === undefined) {
      return acc;
    }
    var new_acc = acc + _val;
    _acc = new_acc;
    _param = [
      curr_x + slope[0] | 0,
      curr_y + slope[1] | 0
    ];
    continue ;
  };
}

console.log(Array.from(traverse([
                3,
                1
              ], [
                0,
                0
              ], ""), (function (x) {
              return x;
            })).filter(validate).length);

console.log(Belt_Array.reduce(slopes, 1.0, (function (acc, item) {
            return acc * Array.from(traverse(item, [
                              0,
                              0
                            ], ""), (function (x) {
                            return x;
                          })).filter(validate).length;
          })));

var part1;

var part2;

exports.input = input;
exports.parsed_input = parsed_input;
exports.length = length;
exports.height = height;
exports.width = width;
exports.slopes = slopes;
exports.validate = validate;
exports.traverse = traverse;
exports.part1 = part1;
exports.part2 = part2;
/* input Not a pure module */
